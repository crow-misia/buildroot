major_version: "local"
minor_version: ""
default_target_cpu: "same_as_host"

toolchain {
  abi_version: "armeabi-v7a"
  abi_libc_version: "armeabi-v7a"
  builtin_sysroot: ""
  compiler: "compiler"
  host_system_name: "armeabi-v7a"
  needsPic: true
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: false
  target_libc: "armeabi-v7a"
  target_cpu: "armeabi-v7a"
  target_system_name: "armeabi"
  toolchain_identifier: "armeabi-v7a"

  tool_path { name: "ar" path: "@TARGET_CROSS@ar" }
  tool_path { name: "compat-ld" path: "/bin/false" }
  tool_path { name: "cpp" path: "@TARGET_CROSS@cpp" }
  tool_path { name: "dwp" path: "@TARGET_CROSS@dwp" }
  tool_path { name: "gcc" path: "@TARGET_CROSS@gcc" }
  tool_path { name: "gcov" path: "@TARGET_CROSS@gcov" }
  tool_path { name: "ld" path: "@TARGET_CROSS@ld" }

  tool_path { name: "nm" path: "@TARGET_CROSS@nm" }
  tool_path { name: "objcopy" path: "@TARGET_CROSS@objcopy" }
  tool_path { name: "objdump" path: "@TARGET_CROSS@objdump" }
  tool_path { name: "strip" path: "@TARGET_CROSS@strip" }

  cxx_builtin_include_directory: "@HOST_DIR@/@TOOLCHAIN_ID@/sysroot/usr/include/"
  cxx_builtin_include_directory: "@HOST_DIR@/@TOOLCHAIN_ID@/include/c++/@GCC_VERSION@"
  cxx_builtin_include_directory: "@HOST_DIR@/@TOOLCHAIN_ID@/include/c++/@GCC_VERSION@/@TOOLCHAIN_ID@"
  cxx_builtin_include_directory: "@HOST_DIR@/lib/gcc/@TOOLCHAIN_ID@/@GCC_VERSION@/include"
  cxx_builtin_include_directory: "@HOST_DIR@/lib/gcc/@TOOLCHAIN_ID@/@GCC_VERSION@/include-fixed"

  cxx_builtin_include_directory: "@HOST_DIR@/usr/include"
  cxx_flag: "-std=c++11"
  linker_flag: "-lstdc++"

  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  unfiltered_cxx_flag: "-no-canonical-prefixes"
  unfiltered_cxx_flag: "-fno-canonical-system-headers"

  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-D_FORTIFY_SOURCE=1"
  compiler_flag: "-fstack-protector"
  linker_flag: "-Wl,-z,relro,-z,now"

  linker_flag: "-no-canonical-prefixes"
  linker_flag: "-pass-exit-codes"

  linker_flag: "-Wl,--build-id=md5"
  linker_flag: "-Wl,--hash-style=gnu"

  compilation_mode_flags {
    mode: DBG
    # Enable debug symbols.
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT

    # No debug symbols.
    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
    # even generally? However, that can't happen here, as it requires special
    # handling in Bazel.
    compiler_flag: "-g0"

    # Conservative choice for -O
    # -O3 can increase binary size and even slow down the resulting binaries.
    # Profile first and / or use FDO if you need better performance than this.
    compiler_flag: "-O2"

    # Disable assertions
    compiler_flag: "-DNDEBUG"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
  linking_mode_flags { mode: DYNAMIC }

}

